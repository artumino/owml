extern alias destination;

using Mono.Reflection;
using OWML.Common;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Text;

namespace OWML.ModLoader
{
	public static class Patches
	{
		public static void PermanantManager_Awake_Postfix()
		{
			using (TextWriter tw = File.CreateText("PermanantManager_Awake_Postfix.txt"))
			{
				tw.WriteLine($"Hello! This text file was generated by Doorstop on {DateTime.Now:R}!");
				tw.WriteLine($"Command line: {Environment.CommandLine}");
				tw.Flush();
			}

			ModLoader.LoadMods();
		}
	}

	public static class TemporaryPatcher
	{
		public static void TempPatch()
		{
			using (TextWriter tw = File.CreateText("TempPatch.txt"))
			{
				tw.WriteLine($"Hello! This text file was generated by Doorstop on {DateTime.Now:R}!");
				tw.WriteLine($"Command line: {Environment.CommandLine}");
				tw.Flush();
			}

			var assemblyDef = destination::Mono.Cecil.AssemblyDefinition.ReadAssembly("Assembly-CSharp.dll");

			var type = assemblyDef.MainModule.Types.First(x => x.Name == "PermanantManager");
			var method = type.Methods.First(x => x.Name == "Awake");

			var ilProcessor = method.Body.GetILProcessor();
			var firstInstruction = ilProcessor.Body.Instructions.First();

			var methodReference = new destination::Mono.Cecil.MethodReference("LoadMods", method.ReturnType, type);
			ilProcessor.InsertBefore(firstInstruction, ilProcessor.Create(destination::Mono.Cecil.Cil.OpCodes.Call, methodReference));
		}

		private static MethodInfo GetMethod<T>(string methodName)
		{
			using (TextWriter tw = File.CreateText("GetMethod.txt"))
			{
				tw.WriteLine($"Hello! This text file was generated by Doorstop on {DateTime.Now:R}!");
				tw.WriteLine($"Command line: {Environment.CommandLine}");
				tw.Flush();
			}

			var fullName = $"{typeof(T).Name}.{methodName}";
			try
			{
				//_console.WriteLine($"Getting method {fullName}", MessageType.Debug);
				var result = Utils.TypeExtensions.GetAnyMethod(typeof(T), methodName);
				if (result == null)
				{
					using (TextWriter tw = File.CreateText("GetMethod_METHOD_NOT_FOUND.txt"))
					{
						tw.WriteLine($"Hello! This text file was generated by Doorstop on {DateTime.Now:R}!");
						tw.WriteLine($"Command line: {Environment.CommandLine}");
						tw.Flush();
					}
					//_console.WriteLine($"Error - method {fullName} not found.", MessageType.Error);
				}
				return result;
			}
			catch (Exception ex)
			{
				using (TextWriter tw = File.CreateText("GetMethod_EXCEPTION.txt"))
				{
					tw.WriteLine($"Hello! This text file was generated by Doorstop on {DateTime.Now:R}!");
					tw.WriteLine($"Command line: {Environment.CommandLine}");
					tw.Flush();
				}
				//_console.WriteLine($"Exception while getting method {fullName}: {ex}", MessageType.Error);
				return null;
			}
		}
	}
}
